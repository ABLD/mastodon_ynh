#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers
source _future.sh

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

# Exit if an error occurs during the execution of the script
ynh_abort_if_errors


#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#================================================

domain=$YNH_APP_ARG_DOMAIN
admin_mastodon=$YNH_APP_ARG_ADMIN
admin_mastodon_mail=$(ynh_user_get_info $admin_mastodon 'mail')
admin_pass=$(ynh_string_random 24)
language=$YNH_APP_ARG_LANGUAGE
port_web=$(ynh_find_port 3000)
port_stream=$(ynh_find_port 4000)

path_url="/"

app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================

final_path=/var/www/$app
test ! -e "$final_path" || ynh_die "This path already contains a folder"

# Normalize the url path syntax
path_url=$(ynh_normalize_url_path $path_url)

# Check web path availability
ynh_webpath_available $domain $path_url
# Register (book) web path
ynh_webpath_register $app $domain $path_url

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================

ynh_app_setting_set $app domain      $domain
ynh_app_setting_set $app admin       $admin_mastodon
ynh_app_setting_set $app language    $language
ynh_app_setting_set $app port_web    $port_web
ynh_app_setting_set $app port_stream $port_stream


#=================================================
# STANDARD MODIFICATIONS
#=================================================


#=================================================
# INSTALL DEPENDENCIES
#=================================================

# TODO: add in a clean way backports and yarn

# Import debian archive pubkey, need on ARM arch
arch=$(uname -m)
if [[ "$arch" = arm*  ]]; then
	apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 8B48AD6246925553
	apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 7638D0442B90D010
fi

# Install source.list debian package backports & yarn
if [ "$(lsb_release --codename --short)" == "jessie" ]; then
	echo "deb http://httpredir.debian.org/debian jessie-backports main" | tee /etc/apt/sources.list.d/jessie-backports.list
fi
curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
ynh_package_update

# install nodejs
ynh_install_nodejs 8

# TODO: use the same mecanism with other files
ynh_install_app_dependencies \
	`# debian packages ` \
	imagemagick libpq-dev libxml2-dev libxslt1-dev file curl apt-transport-https pkg-config libprotobuf-dev protobuf-compiler libicu-dev libidn11-dev \
	`# redis ` \
	redis-server redis-tools \
	`# postgresql ` \
	postgresql postgresql-contrib \
	`# Ruby ` \
	autoconf bison build-essential libssl-dev libyaml-dev libreadline6-dev zlib1g-dev libncurses5-dev libffi-dev libgdbm3 libgdbm-dev \
	`# ffmpeg from backports ` \
	ffmpeg \
	`# Yarn ` \
	yarn
	
#=================================================
# DATABASE SETUP
#=================================================

# Create postgresql database
db_name="${app}_production"
db_pwd=$(ynh_string_random 30)
ynh_app_setting_set "$app" db_name "$db_name"
ynh_app_setting_set "$app" db_pwd "$db_pwd"
ynh_psql_test_if_first_run
ynh_psql_create_user "$app" "$db_pwd"
ynh_psql_execute_as_root \
"CREATE DATABASE $db_name ENCODING 'UTF8' LC_COLLATE='C' LC_CTYPE='C' template=template0 OWNER $app;"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

# Creates the destination directory and stores its location.
ynh_app_setting_set "$app" final_path "$final_path"
# Download all sources rbenv, ruby and mastodon

ynh_setup_source "$final_path/.rbenv"                    "app-rbenv"
ynh_setup_source "$final_path/.rbenv/plugins/ruby-build" "app-ruby-build"
ynh_setup_source "$final_path/live"                      "app-mastodon"

#=================================================
# NGINX CONFIGURATION
#=================================================

# Create a dedicated nginx config
ynh_replace_string "__PORT_WEB__"    "$port_web"    "../conf/nginx.conf"
ynh_replace_string "__PORT_STREAM__" "$port_stream" "../conf/nginx.conf"
ynh_add_nginx_config

#=================================================
# CREATE DEDICATED USER
#=================================================

# Create a system user
adduser $app --home $final_path --gecos "First Last,RoomNumber,WorkPhone,HomePhone" --disabled-password

chown -R "$app": "$final_path"

# TODO: try to use ynh_install_ruby from https://github.com/YunoHost-Apps/Experimental_helpers
# Install de rbenv
(
	cd $final_path/.rbenv
	src/configure && make -C src

	echo "export PATH=\"$final_path/.rbenv/bin:$final_path/live/bin:\$PATH\"
eval \"\$(rbenv init -)\"" > $final_path/.profile
	echo "export PATH=\"$final_path/.rbenv/bin:$final_path/live/bin:\$PATH\"" > $final_path/.bashrc
)

# Install ruby-build
(
	exec_as "$app" $final_path/.rbenv/bin/rbenv install 2.6.0 || true
	exec_as "$app" $final_path/.rbenv/bin/rbenv global 2.6.0  || true 
	exec_as "$app" $final_path/.rbenv/versions/2.6.0/bin/ruby -v 
)

# Create symlink for ruby
rm /usr/bin/ruby || true
ln -s $final_path/.rbenv/versions/2.6.0/bin/ruby /usr/bin/ruby || true

# Yarn install on root
pushd $final_path/live
yarn install --pure-lockfile
popd

# Adjust Mastodon config

cp -a $final_path/live/.env.production.sample $final_path/live/.env.production
ynh_replace_string "REDIS_HOST=redis"         "REDIS_HOST=127.0.0.1"        "${final_path}/live/.env.production"
ynh_replace_string "DB_HOST=db"               "DB_HOST=/var/run/postgresql" "${final_path}/live/.env.production"
ynh_replace_string "DB_USER=postgres"         "DB_USER=${app}"              "${final_path}/live/.env.production"
ynh_replace_string "DB_NAME=postgres"         "DB_NAME=${db_name}"          "${final_path}/live/.env.production"
ynh_replace_string "DB_PASS="                 "DB_PASS=${db_pwd}"           "${final_path}/live/.env.production"
ynh_replace_string "LOCAL_DOMAIN=example.com" "LOCAL_DOMAIN=${domain}"      "${final_path}/live/.env.production"

language="$(echo $language | head -c 2)"
ynh_replace_string "# DEFAULT_LOCALE=de"      "DEFAULT_LOCALE=${language}"  "${final_path}/live/.env.production"

paperclip_secret=$(head -n128 /dev/urandom | tail -n +1 | tr -dc -d 'a-z0-9' | head -c128)
secret_key_base=$(head -n128 /dev/urandom | tail -n +1 | tr -dc -d 'a-z0-9' | head -c128)
otp_secret=$(head -n128 /dev/urandom | tail -n +1 | tr -dc -d 'a-z0-9' | head -c128)
ynh_replace_string "PAPERCLIP_SECRET=" "PAPERCLIP_SECRET=$paperclip_secret" "${final_path}/live/.env.production"
ynh_replace_string "SECRET_KEY_BASE="  "SECRET_KEY_BASE=$secret_key_base"   "${final_path}/live/.env.production"
ynh_replace_string "OTP_SECRET="       "OTP_SECRET=$otp_secret"             "${final_path}/live/.env.production"

ynh_replace_string "SMTP_LOGIN="                                 "#SMTP_LOGIN="                                     "${final_path}/live/.env.production"
ynh_replace_string "SMTP_PASSWORD="                              "#SMTP_PASSWORD="                                  "${final_path}/live/.env.production"
ynh_replace_string "SMTP_SERVER=smtp.mailgun.org"                "SMTP_SERVER=localhost"                            "${final_path}/live/.env.production"
ynh_replace_string "SMTP_PORT=587"                               "SMTP_PORT=25"                                     "${final_path}/live/.env.production"
ynh_replace_string "SMTP_FROM_ADDRESS=notifications@example.com" "SMTP_FROM_ADDRESS=$admin_mastodon@$domain"        "${final_path}/live/.env.production"
ynh_replace_string "#SMTP_AUTH_METHOD=plain"                     "SMTP_AUTH_METHOD=none"                            "${final_path}/live/.env.production"
ynh_replace_string "#SMTP_OPENSSL_VERIFY_MODE=peer"              "SMTP_OPENSSL_VERIFY_MODE=none"                    "${final_path}/live/.env.production"

# Preconfig CSS & JS
# Install Mastodon
# Give right permission for the app
chown -R "$app": "$final_path"

(
	cd "$final_path/live"
	su mastodon <<INSTALL
		$final_path/.rbenv/versions/2.6.0/bin/gem install bundler
		$final_path/.rbenv/versions/2.6.0/bin/gem bundle update --bundler
		$final_path/live/bin/bundle install -j$(getconf _NPROCESSORS_ONLN) --deployment --without development test 
		yarn install --production --no-progress --non-interactive --silent
		echo "SAFETY_ASSURED=1">> .env.production
		RAILS_ENV=production $final_path/live/bin/bundle exec rails db:migrate --quiet
		RAILS_ENV=production $final_path/live/bin/bundle exec rails assets:precompile --quiet
INSTALL
)

#=================================================
# SETUP SYSTEMD
#=================================================

# Create a dedicated systemd config
ynh_replace_string "__PORT_WEB__"    "$port_web"    "../conf/mastodon-web.service"
ynh_replace_string "__PORT_STREAM__" "$port_stream" "../conf/mastodon-streaming.service"
ynh_add_systemd_config "$app-web"       "mastodon-web.service"
ynh_add_systemd_config "$app-sidekiq"   "mastodon-sidekiq.service"
ynh_add_systemd_config "$app-streaming" "mastodon-streaming.service"

systemctl start "$app-web.service" "$app-sidekiq.service" "$app-streaming.service"

# Create user
(
	cd "$final_path/live"
	su mastodon <<CREATEUSER
RAILS_ENV=production bin/bundle exec rails c
account = Account.create!(username: '$admin_mastodon')
user = User.create!(email: '$admin_mastodon_mail', password: '$admin_pass', account: account)
CREATEUSER
	su mastodon <<SETADMIN
RAILS_ENV=production bin/tootctl accounts modify $admin_mastodon --confirm
RAILS_ENV=production bin/tootctl accounts modify $admin_mastodon --role admin
SETADMIN
)

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# TODO:Set permissions to app files
chown -R "$app": "$final_path"

#=================================================
# ADVERTISE SERVICE IN ADMIN PANEL
#=================================================

# Add service YunoHost
yunohost service add "$app-web"
yunohost service add "$app-sidekiq"
yunohost service add "$app-streaming"

# SETUP CRON JOB FOR REMOVING CACHE
ynh_replace_string  "__FINAL_PATH__" "$final_path" ../conf/cron
ynh_replace_string "__USER__" "$app"  ../conf/cron
sudo cp -f ../conf/cron /etc/cron.d/$app 

#=================================================
# SETUP SSOWAT
#=================================================

# TODO: all private install
# Unprotected url
ynh_app_setting_set "$app" unprotected_uris "/"

#=================================================
# RELOAD NGINX
#=================================================

# Reload Nginx
systemctl reload nginx

#=================================================
# SEND A README FOR THE ADMIN
#=================================================

message="Mastodon was successfully installed :)
Please open 'https://$domain$path_url'
The admin username is: $admin_mastodon_mail
The admin password is: $admin_pass
If you facing an issue or want to improve this app, please open a new issue in this project: https://github.com/YunoHost-Apps/mastodon_ynh"

ynh_send_readme_to_admin "$message" "$admin_mastodon"
