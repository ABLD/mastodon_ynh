#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================

# See comments in install script
app=$YNH_APP_INSTANCE_NAME
db_name=$(ynh_app_setting_get "$app" db_name)
db_pwd=$(ynh_app_setting_get "$app" db_pwd)

# Retrieve app settings
domain=$(ynh_app_setting_get "$app" domain)
path=$(ynh_app_setting_get "$app" path)
admin=$(ynh_app_setting_get "$app" admin)
language=$(ynh_app_setting_get "$app" language)
final_path=$(ynh_app_setting_get "$app" final_path)
path_url="/"
port_web=$(ynh_app_setting_get "$app" port_web)
port_stream=$(ynh_app_setting_get "$app" port_stream)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================

# If db_name doesn't exist, create it
if [ -z "$db_name" ]; then
	db_name="${app}_production"
	ynh_app_setting_set "$app" db_name "$db_name"
fi

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
	final_path=/var/www/$app
	ynh_app_setting_set "$app" final_path "$final_path"
fi

# Check if admin is not null
if [[ "$admin" = "" || "$language" = "" ]]; then
    echo "Unable to upgrade, please contact support"
    ynh_die
fi

# If db_pwd doesn't exist, create it, need for old install
if [[ -z "$db_pwd" ]]; then
	db_pwd=$(ynh_string_random)
	ynh_app_setting_set $app db_pwd $db_pwd
	ynh_psql_test_if_first_run
	sudo --login --user=postgres psql -c"ALTER user $app WITH PASSWORD '$db_pwd'" postgres
	ynh_replace_string "DB_PASS=" "DB_PASS=${db_pwd}" "${final_path}/live/.env.production"
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# Remove repo Files
#=================================================

if [ "$(lsb_release --codename --short)" == "jessie" ]; then
	echo "deb http://httpredir.debian.org/debian jessie-backports main" | tee /etc/apt/sources.list.d/jessie-backports.list
	ynh_secure_remove /etc/apt/sources.list.d/backports.list
fi

# Add yarn repo
echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list

#=================================================
# INSTALL DEPENDENCIES
#=================================================

ynh_install_nodejs 8

# add additional package for upgrade
ynh_package_install pkg-config libprotobuf-dev protobuf-compiler libicu-dev libidn11-dev postgresql-server-dev-all

#=================================================
# STANDARD UPGRADE STEPS
#=================================================

# Change owner of live folder
chown -R $app: $final_path/live

# Stop Mastodon Services
# Restart Mastodon
yunohost service stop "$app-web"
yunohost service stop "$app-sidekiq"
yunohost service stop "$app-streaming"

# Download Mastodon
ynh_setup_source "$final_path/live"  "app-mastodon"

# Clean files which are not needed anymore
ynh_secure_remove $final_path/live/config/initializers/timeout.rb

#=================================================
# NGINX CONFIGURATION
#=================================================

ynh_replace_string "__PORT_WEB__"    "$port_web"    "../conf/nginx.conf"
ynh_replace_string "__PORT_STREAM__" "$port_stream" "../conf/nginx.conf"
ynh_add_nginx_config

#=================================================
# UPGRADE MASTODON
#=================================================

# Upgrade rbenv and ruby plugins
ynh_setup_source "$final_path/.rbenv"                    "app-rbenv"
ynh_setup_source "$final_path/.rbenv/plugins/ruby-build" "app-ruby-build"

# Install ruby 2.5.1
(
	exec_as "$app" $final_path/.rbenv/bin/rbenv install -s 2.5.1 || true
	exec_as "$app" $final_path/.rbenv/bin/rbenv global 2.5.1 || true
	exec_as "$app" $final_path/.rbenv/versions/2.5.1/bin/ruby -v
)

# Create symlink for ruby
rm /usr/bin/ruby || true
ln -s $final_path/.rbenv/versions/2.5.1/bin/ruby /usr/bin/ruby || true

# Preconfig CSS & JS
# Install Mastodon
(
sudo su - $app <<MCOMMANDS
pushd ~/live
$final_path/.rbenv/versions/2.5.1/bin/gem install bundler
if [ "$(lsb_release --codename --short)" == "jessie" ]; then
	$final_path/.rbenv/versions/2.5.1/bin/bundle install --deployment --without development test
else
	$final_path/.rbenv/versions/2.5.1/bin/bundle install --deployment --force --without development test
fi
yarn install --pure-lockfile
MCOMMANDS
)

# Install package with yarn and restart postgresql
pushd $final_path/live
yarn install --pure-lockfile
systemctl restart postgresql
popd

# Apply Mastodon upgrade
(
pushd $final_path/live
RAILS_ENV=production $final_path/.rbenv/versions/2.5.1/bin/bundle exec rails assets:clean
RAILS_ENV=production $final_path/.rbenv/versions/2.5.1/bin/bundle exec rails assets:precompile
popd

sudo su - $app <<COMMANDS
pushd ~/live
RAILS_ENV=production $final_path/.rbenv/versions/2.5.1/bin/bundle exec rails db:migrate
COMMANDS
)
#=================================================
# SETUP SYSTEMD
#=================================================

# Create a dedicated systemd config
ynh_replace_string "__PORT_WEB__"    "$port_web"    "../conf/mastodon-web.service"
ynh_replace_string "__PORT_STREAM__" "$port_stream" "../conf/mastodon-streaming.service"
ynh_add_systemd_config "$app-web"       "mastodon-web.service"
ynh_add_systemd_config "$app-sidekiq"   "mastodon-sidekiq.service"
ynh_add_systemd_config "$app-streaming" "mastodon-streaming.service"

#=================================================
# ADVERTISE SERVICE IN ADMIN PANEL
#=================================================

# Add service YunoHost
yunohost service add "$app-web"
yunohost service add "$app-sidekiq"
yunohost service add "$app-streaming"

yunohost service start "$app-web"
yunohost service start "$app-sidekiq"
yunohost service start "$app-streaming"

# Waiting start all services
sleep 30

#=================================================
# RELOAD NGINX
#=================================================

systemctl reload nginx

#=================================================
# SETUP SSOWAT
#=================================================

ynh_app_setting_set "$app" unprotected_uris "/"

#=================================================
# RELOAD ssowatconf
#=================================================

sudo yunohost app ssowatconf
