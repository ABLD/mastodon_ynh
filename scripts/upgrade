#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================

# See comments in install script
app=$YNH_APP_INSTANCE_NAME

# Retrieve app settings
domain=$(ynh_app_setting_get "$app" domain)
path=$(ynh_app_setting_get "$app" path)
admin=$(ynh_app_setting_get "$app" admin)
language=$(ynh_app_setting_get "$app" language)
final_path=$(ynh_app_setting_get "$app" final_path)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================

# If db_name doesn't exist, create it
if [ -z "$db_name" ]; then
	db_name=$(ynh_sanitize_dbid "$app")
	ynh_app_setting_set "$app" db_name "$db_name"
fi

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
	final_path=/var/www/$app
	ynh_app_setting_set "$app" final_path "$final_path"
fi

# Check if admin is not null
if [[ "$admin" = "" || "$language" = "" ]]; then
    echo "Unable to upgrade, please contact support"
    ynh_die
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# CHECK THE PATH
#=================================================

# Normalize the URL path syntax
path_url=$(ynh_normalize_url_path $path_url)

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# TODO TODO TODO
#=================================================

db_name=$app

# Modify Nginx configuration file and copy it to Nginx conf directory
sudo sed -i "s@__PATH__@$app@g" ../conf/nginx.conf*
sudo sed -i "s@__FINALPATH__@$final_path@g" ../conf/nginx.conf*
sudo cp ../conf/nginx.conf /etc/nginx/conf.d/$domain.d/$app.conf

# Stop Mastodon Services
sudo systemctl stop mastodon-*.service

# Change owner of live folder
sudo chown -R $app: $final_path/live

# Download Mastodon
sudo su - $app <<PULLCOMMANDS
pushd ~/live
git fetch -t
git reset --hard origin/master
git pull https://github.com/tootsuite/mastodon.git master
PULLCOMMANDS

# Switch branch to tagged release
cd $final_path/live
version=$(curl -s https://api.github.com/repos/tootsuite/mastodon/releases/latest | grep tag_name | cut -d\" -f4)
sudo su - $app <<SWITCHCOMMANDS
pushd ~/live
git checkout $version
SWITCHCOMMANDS

# upgrade Node.js v4 to v6
node_version=$(nodejs --version)
if [[ $node_version =~ ^v4.*$  ]]; then
	pushd /opt
	curl -sL https://deb.nodesource.com/setup_6.x | sudo bash -
	sudo apt-get -y install nodejs
fi

# add additional package for upgrade
ynh_package_install pkg-config libprotobuf-dev protobuf-compiler libicu-dev libidn11-dev postgresql-server-dev-9.4

# Install ruby 2.5.0 for release 2.0
sudo su - $app <<RCOMMANDS
cd $final_path/.rbenv && git pull && cd -
cd $final_path/.rbenv/plugins/ruby-build && git pull && cd -
$final_path/.rbenv/bin/rbenv install 2.5.0 || true
$final_path/.rbenv/versions/2.5.0/bin/ruby -v
RCOMMANDS

# Create symlink for ruby 2.5.0
sudo rm /usr/bin/ruby || true
sudo ln -s $final_path/.rbenv/versions/2.5.0/bin/ruby /usr/bin/ruby || true

# Install Mastodon
sudo su - $app <<MCOMMANDS
pushd ~/live
$final_path/.rbenv/versions/2.5.0/bin/gem install bundler
bin/bundle install --deployment --without development test
yarn install --pure-lockfile
MCOMMANDS

# Apply Mastodon upgrade
sudo su - $app <<COMMANDS
pushd ~/live
RAILS_ENV=production bundle exec rails assets:clean
RAILS_ENV=production bundle exec rails assets:precompile
RAILS_ENV=production bundle exec rails db:migrate
# Upgrade to 2.2.0
RAILS_ENV=production bundle exec rails mastodon:maintenance:remove_regeneration_markers
COMMANDS

# Restart Mastodon
sudo systemctl start mastodon-*.service

# Waiting start all services
sleep 30

# Reload Nginx
sudo systemctl reload nginx

# Set app public
ynh_app_setting_set "$app" unprotected_uris "/"

# Reload SSOwat configuration
sudo yunohost app ssowatconf
